# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, JohnZhao
# This file is distributed under the same license as the MYNT® EYE SDK Guide
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MYNT® EYE SDK Guide 2.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-08 21:54+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../src/analytics/analytics_stamp.rst:4
msgid "分析时间戳"
msgstr "Analyze time stamps"

#: ../../src/analytics/analytics_stamp.rst:6
msgid ""
"SDK 提供了时间戳分析的脚本 ``stamp_analytics.py`` 。工具详情可见 `tools/README.md "
"<https://github.com/slightech/MYNT-EYE-S-SDK/tree/master/tools>`_ 。"
msgstr ""
"SDK provides a script for timestamp analysis ``stamp_analytics.py`` . "
"Tool details are visible in `tools/README.md "
"<https://github.com/slightech/MYNT-EYE-S-SDK/tree/master/tools>`_ ."

#: ../../src/analytics/analytics_stamp.rst:8
msgid "参考运行命令及结果，于 Linux 上："
msgstr "Reference run commands and results on Linux:"

#: ../../src/analytics/analytics_stamp.rst:43
msgid "分析结果图会保存进数据集目录，参考如下："
msgstr ""
"The analysis result graph will be saved in the dataset directory, as "
"follows:"

#: ../../src/analytics/analytics_stamp.rst:47
msgid "另外，脚本具体选项可执行 ``-h`` 了解："
msgstr ""
"In addition, the script specific options can be executed ``-h`` to "
"understand:"

#: ../../src/analytics/analytics_stamp.rst:55
msgid ""
"录制数据集时建议 ``record.cc`` 里注释显示图像 ``cv::imshow()``， ``dataset.cc`` 里注释存储图像 "
"``cv::imwrite()`` 。因为此些操作都比较耗时，可能会导致丢弃图像。换句话说就是消费赶不上生产，所以丢弃了部分图像。 "
"``record.cc`` 里用的 ``GetStreamDatas()`` 仅缓存最新的 4 张图像。"
msgstr ""
"Suggestions when recording data sets ``record.cc`` annotation display "
"image inside ``cv::imshow()``, ``dataset.cc`` annotation display image "
"inside ``cv::imwrite()`` . Because these operations are time-consuming, "
"they can cause images to be discarded. In other words, consumption can't "
"keep up with production, so some images are discarded. "
"``GetStreamDatas()`` used in ``record.cc`` only caches the latest 4 "
"images."

